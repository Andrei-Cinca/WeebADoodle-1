/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mde.validation

import org.eclipse.xtext.validation.Check
import uk.ac.kcl.inf.mde.weebADoodle.Character
import uk.ac.kcl.inf.mde.weebADoodle.WeebADoodlePackage
import uk.ac.kcl.inf.mde.weebADoodle.DescriptionStatement
import uk.ac.kcl.inf.mde.weebADoodle.Scene
import uk.ac.kcl.inf.mde.weebADoodle.Board
import uk.ac.kcl.inf.mde.services.WeebADoodleGrammarAccess.SceneObjectElements
import uk.ac.kcl.inf.mde.weebADoodle.SceneObject
import uk.ac.kcl.inf.mde.weebADoodle.PositionStatement
import uk.ac.kcl.inf.mde.weebADoodle.LightingStatement
import uk.ac.kcl.inf.mde.weebADoodle.CameraShotStatement

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class WeebADoodleValidator extends AbstractWeebADoodleValidator {
	
	public static val INVALID_NAME = 'invalidName'
	public static val INVALID_DESCRIPTION_SIZE='invalidDescriptionSize'
	public static val INVALID_SCENE_ID='duplicatedSceneID'
	public static val INVALID_OBJECT_LENGTH='invalidObjectLength'
	public static val INVALID_POSITION_VAlUE='invalidPositionValue'
	public static val INVALID_CHARACTERS_IN_SCENE='invalidSceneCharacters'
	public static val INVALID_Objects_IN_SCENE='invalidSceneObjects'
	public static val INVALID_BACKGROUND='invalidBackgroundInScene'
	public static val INVALID_LIGHTING_STATEMENT='invalidLightingStatement'
	public static val INVALID_CAMERA_STATEMENT='invalidCameraStatement'

	@Check
	def checkIfNameIsTooShort(Character chr){
		if(chr.name.length()<= 1){
			warning('Name should be longer than 1 characters',chr,WeebADoodlePackage.Literals.CHARACTER__NAME,INVALID_NAME)
		}
	}
	
	@Check
	def checkDescriptionLength(DescriptionStatement descrip){
		if(descrip.description.length<= 8){
			warning('Description should be longer than 8 characters',descrip,WeebADoodlePackage.Literals.DESCRIPTION_STATEMENT__DESCRIPTION,INVALID_DESCRIPTION_SIZE)
		}
	}
	
	@Check
	def checkObjectNotNull(SceneObject obj){
		if(obj.name.length()<=0){
			warning('An object should not have an empty name',obj,WeebADoodlePackage.Literals.SCENE_OBJECT__NAME,INVALID_OBJECT_LENGTH)
		}
		
	}
	
	@Check
	def checkUniqueSceneNames(Board board) {
    val names = newHashSet
    for (scene : board.scenes) {
        if (!names.add(scene.name)) {
            warning('Scene IDs should be unique',scene,WeebADoodlePackage.Literals.SCENE__NAME,INVALID_SCENE_ID)
        }
    }
}

	@Check
	def checkPositionsNotNull(PositionStatement pos) {
        if (pos.position.length<=0) {
            warning('Position should not be empty',pos,WeebADoodlePackage.Literals.POSITION_STATEMENT__POSITION,INVALID_POSITION_VAlUE)
        }
    
}

	@Check
		def checkUniqueCharactersInScene(Scene scene) {
	    val chars = newHashSet
	    for (chr : scene.characters) {
	        if (!chars.add(chr.name)) {
	            warning('Characters should be unique within scenes',scene,WeebADoodlePackage.Literals.SCENE__NAME,INVALID_CHARACTERS_IN_SCENE)
	        }
	    }
	}
	
	
	@Check
		def checkUniqueObjectsInScene(Scene scene) {
	    val objs = newHashSet
	    for (obj : scene.objects) {
	        if (!objs.add(obj.name)) {
	            warning('Objects should be unique within scenes',scene,WeebADoodlePackage.Literals.SCENE__NAME,INVALID_Objects_IN_SCENE)
	        }
	    }
	}


	@Check
	def checkBackgroundNotNull(Scene scene) {
        if (scene.background.length<=0) {
            warning('Background should not be empty',scene,WeebADoodlePackage.Literals.SCENE__BACKGROUND,INVALID_BACKGROUND)
        }
    
	}


	
	@Check
	def checkLightingNotNull(LightingStatement light) {
        if (light.source.length<=0 ) {
            warning('Source  of lighting cannot be empty',light,WeebADoodlePackage.Literals.LIGHTING_STATEMENT__SOURCE,INVALID_LIGHTING_STATEMENT)
        }
         if (light.direction.length<=0) {
            warning('Direction of lighting cannot be empty',light,WeebADoodlePackage.Literals.LIGHTING_STATEMENT__DIRECTION,INVALID_LIGHTING_STATEMENT)
        }
    
	}


	@Check
	def checkCameraNotNull(CameraShotStatement camera) {
        if ( camera.cameraShot.length<=0) {
            warning(' Camera Shot cannot be empty',camera,WeebADoodlePackage.Literals.CAMERA_SHOT_STATEMENT__CAMERA_SHOT,INVALID_CAMERA_STATEMENT)
        }
        if (camera.cameraAngle.length<=0 ) {
            warning('Camera Angle cannot be empty',camera,WeebADoodlePackage.Literals.CAMERA_SHOT_STATEMENT__CAMERA_ANGLE,INVALID_CAMERA_STATEMENT)
        }
    
	}

	
	
	
}
