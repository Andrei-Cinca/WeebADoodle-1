/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mde.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WeebADoodleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mde.WeebADoodle.Board");
		private final Assignment cSettingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSettingsSettingParserRuleCall_0 = (RuleCall)cSettingsAssignment.eContents().get(0);
		
		//Board:
		//    settings += Setting*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//settings += Setting*
		public Assignment getSettingsAssignment() { return cSettingsAssignment; }
		
		//Setting
		public RuleCall getSettingsSettingParserRuleCall_0() { return cSettingsSettingParserRuleCall_0; }
	}
	public class SettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mde.WeebADoodle.Setting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Setting:
		//    Action |
		//    Character
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Action |
		//Character
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }
		
		//Character
		public RuleCall getCharacterParserRuleCall_1() { return cCharacterParserRuleCall_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mde.WeebADoodle.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandActionCommandEnumRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Action:
		//    command = ActionCommand '(' ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command = ActionCommand '(' ')'
		public Group getGroup() { return cGroup; }
		
		//command = ActionCommand
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//ActionCommand
		public RuleCall getCommandActionCommandEnumRuleCall_0_0() { return cCommandActionCommandEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mde.WeebADoodle.Character");
		private final Keyword cCharacterKeyword = (Keyword)rule.eContents().get(1);
		
		//Character:
		//    'character'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'character'
		public Keyword getCharacterKeyword() { return cCharacterKeyword; }
	}
	
	public class ActionCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mde.WeebADoodle.ActionCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForwardEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForwardForwardKeyword_0_0 = (Keyword)cForwardEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBackwardEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBackwardBackwardKeyword_1_0 = (Keyword)cBackwardEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ActionCommand:
		//    forward='forward' | backward='backward'
		//;
		public EnumRule getRule() { return rule; }
		
		//forward='forward' | backward='backward'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//forward='forward'
		public EnumLiteralDeclaration getForwardEnumLiteralDeclaration_0() { return cForwardEnumLiteralDeclaration_0; }
		
		//'forward'
		public Keyword getForwardForwardKeyword_0_0() { return cForwardForwardKeyword_0_0; }
		
		//backward='backward'
		public EnumLiteralDeclaration getBackwardEnumLiteralDeclaration_1() { return cBackwardEnumLiteralDeclaration_1; }
		
		//'backward'
		public Keyword getBackwardBackwardKeyword_1_0() { return cBackwardBackwardKeyword_1_0; }
	}
	
	private final BoardElements pBoard;
	private final SettingElements pSetting;
	private final ActionElements pAction;
	private final ActionCommandElements eActionCommand;
	private final CharacterElements pCharacter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WeebADoodleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBoard = new BoardElements();
		this.pSetting = new SettingElements();
		this.pAction = new ActionElements();
		this.eActionCommand = new ActionCommandElements();
		this.pCharacter = new CharacterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.mde.WeebADoodle".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Board:
	//    settings += Setting*
	//;
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}
	
	//Setting:
	//    Action |
	//    Character
	//;
	public SettingElements getSettingAccess() {
		return pSetting;
	}
	
	public ParserRule getSettingRule() {
		return getSettingAccess().getRule();
	}
	
	//Action:
	//    command = ActionCommand '(' ')'
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//enum ActionCommand:
	//    forward='forward' | backward='backward'
	//;
	public ActionCommandElements getActionCommandAccess() {
		return eActionCommand;
	}
	
	public EnumRule getActionCommandRule() {
		return getActionCommandAccess().getRule();
	}
	
	//Character:
	//    'character'
	//;
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
