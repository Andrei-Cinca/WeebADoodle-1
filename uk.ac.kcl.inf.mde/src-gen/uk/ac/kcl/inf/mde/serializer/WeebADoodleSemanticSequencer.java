/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mde.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.mde.services.WeebADoodleGrammarAccess;
import uk.ac.kcl.inf.mde.weebADoodle.ActionStatement;
import uk.ac.kcl.inf.mde.weebADoodle.Board;
import uk.ac.kcl.inf.mde.weebADoodle.CameraShotStatement;
import uk.ac.kcl.inf.mde.weebADoodle.DescriptionStatement;
import uk.ac.kcl.inf.mde.weebADoodle.DialogueStatement;
import uk.ac.kcl.inf.mde.weebADoodle.LightingStatement;
import uk.ac.kcl.inf.mde.weebADoodle.PositionStatement;
import uk.ac.kcl.inf.mde.weebADoodle.Scene;
import uk.ac.kcl.inf.mde.weebADoodle.SceneObject;
import uk.ac.kcl.inf.mde.weebADoodle.Setting;
import uk.ac.kcl.inf.mde.weebADoodle.WeebADoodlePackage;

@SuppressWarnings("all")
public class WeebADoodleSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WeebADoodleGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WeebADoodlePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WeebADoodlePackage.ACTION_STATEMENT:
				sequence_ActionStatement(context, (ActionStatement) semanticObject); 
				return; 
			case WeebADoodlePackage.BOARD:
				sequence_Board(context, (Board) semanticObject); 
				return; 
			case WeebADoodlePackage.CAMERA_SHOT_STATEMENT:
				sequence_CameraShotStatement(context, (CameraShotStatement) semanticObject); 
				return; 
			case WeebADoodlePackage.CHARACTER:
				sequence_Character(context, (uk.ac.kcl.inf.mde.weebADoodle.Character) semanticObject); 
				return; 
			case WeebADoodlePackage.DESCRIPTION_STATEMENT:
				sequence_DescriptionStatement(context, (DescriptionStatement) semanticObject); 
				return; 
			case WeebADoodlePackage.DIALOGUE_STATEMENT:
				sequence_DialogueStatement(context, (DialogueStatement) semanticObject); 
				return; 
			case WeebADoodlePackage.LIGHTING_STATEMENT:
				sequence_LightingStatement(context, (LightingStatement) semanticObject); 
				return; 
			case WeebADoodlePackage.POSITION_STATEMENT:
				sequence_PositionStatement(context, (PositionStatement) semanticObject); 
				return; 
			case WeebADoodlePackage.SCENE:
				sequence_Scene(context, (Scene) semanticObject); 
				return; 
			case WeebADoodlePackage.SCENE_OBJECT:
				sequence_SceneObject(context, (SceneObject) semanticObject); 
				return; 
			case WeebADoodlePackage.SETTING:
				sequence_Setting(context, (Setting) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ActionStatement returns ActionStatement
	 *
	 * Constraint:
	 *     action=STRING
	 * </pre>
	 */
	protected void sequence_ActionStatement(ISerializationContext context, ActionStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.ACTION_STATEMENT__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.ACTION_STATEMENT__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionStatementAccess().getActionSTRINGTerminalRuleCall_1_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Board returns Board
	 *
	 * Constraint:
	 *     scenes+=Scene+
	 * </pre>
	 */
	protected void sequence_Board(ISerializationContext context, Board semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CameraShotStatement returns CameraShotStatement
	 *
	 * Constraint:
	 *     (cameraShot=STRING cameraAngle=STRING)
	 * </pre>
	 */
	protected void sequence_CameraShotStatement(ISerializationContext context, CameraShotStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.CAMERA_SHOT_STATEMENT__CAMERA_SHOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.CAMERA_SHOT_STATEMENT__CAMERA_SHOT));
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.CAMERA_SHOT_STATEMENT__CAMERA_ANGLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.CAMERA_SHOT_STATEMENT__CAMERA_ANGLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCameraShotStatementAccess().getCameraShotSTRINGTerminalRuleCall_1_0(), semanticObject.getCameraShot());
		feeder.accept(grammarAccess.getCameraShotStatementAccess().getCameraAngleSTRINGTerminalRuleCall_3_0(), semanticObject.getCameraAngle());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Character returns Character
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         value=STRING 
	 *         position=PositionStatement 
	 *         action=ActionStatement? 
	 *         dialogue=DialogueStatement? 
	 *         description=DescriptionStatement
	 *     )
	 * </pre>
	 */
	protected void sequence_Character(ISerializationContext context, uk.ac.kcl.inf.mde.weebADoodle.Character semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DescriptionStatement returns DescriptionStatement
	 *
	 * Constraint:
	 *     description=STRING
	 * </pre>
	 */
	protected void sequence_DescriptionStatement(ISerializationContext context, DescriptionStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.DESCRIPTION_STATEMENT__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.DESCRIPTION_STATEMENT__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionStatementAccess().getDescriptionSTRINGTerminalRuleCall_1_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DialogueStatement returns DialogueStatement
	 *
	 * Constraint:
	 *     dialogue=STRING
	 * </pre>
	 */
	protected void sequence_DialogueStatement(ISerializationContext context, DialogueStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.DIALOGUE_STATEMENT__DIALOGUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.DIALOGUE_STATEMENT__DIALOGUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDialogueStatementAccess().getDialogueSTRINGTerminalRuleCall_1_0(), semanticObject.getDialogue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LightingStatement returns LightingStatement
	 *
	 * Constraint:
	 *     (source=STRING direction=STRING)
	 * </pre>
	 */
	protected void sequence_LightingStatement(ISerializationContext context, LightingStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.LIGHTING_STATEMENT__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.LIGHTING_STATEMENT__SOURCE));
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.LIGHTING_STATEMENT__DIRECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.LIGHTING_STATEMENT__DIRECTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLightingStatementAccess().getSourceSTRINGTerminalRuleCall_1_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getLightingStatementAccess().getDirectionSTRINGTerminalRuleCall_3_0(), semanticObject.getDirection());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PositionStatement returns PositionStatement
	 *
	 * Constraint:
	 *     position=STRING
	 * </pre>
	 */
	protected void sequence_PositionStatement(ISerializationContext context, PositionStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.POSITION_STATEMENT__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.POSITION_STATEMENT__POSITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPositionStatementAccess().getPositionSTRINGTerminalRuleCall_1_0(), semanticObject.getPosition());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SceneObject returns SceneObject
	 *
	 * Constraint:
	 *     (name=ID value=STRING position=PositionStatement description=DescriptionStatement)
	 * </pre>
	 */
	protected void sequence_SceneObject(ISerializationContext context, SceneObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.SCENE_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.SCENE_OBJECT__NAME));
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.SCENE_OBJECT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.SCENE_OBJECT__VALUE));
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.SCENE_OBJECT__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.SCENE_OBJECT__POSITION));
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.SCENE_OBJECT__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.SCENE_OBJECT__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSceneObjectAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSceneObjectAccess().getValueSTRINGTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSceneObjectAccess().getPositionPositionStatementParserRuleCall_6_0(), semanticObject.getPosition());
		feeder.accept(grammarAccess.getSceneObjectAccess().getDescriptionDescriptionStatementParserRuleCall_7_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scene returns Scene
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         value=STRING 
	 *         background=STRING 
	 *         settings=Setting 
	 *         characters+=Character* 
	 *         objects+=SceneObject*
	 *     )
	 * </pre>
	 */
	protected void sequence_Scene(ISerializationContext context, Scene semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Setting returns Setting
	 *
	 * Constraint:
	 *     (camera=CameraShotStatement lighting=LightingStatement description=DescriptionStatement)
	 * </pre>
	 */
	protected void sequence_Setting(ISerializationContext context, Setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.SETTING__CAMERA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.SETTING__CAMERA));
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.SETTING__LIGHTING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.SETTING__LIGHTING));
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.SETTING__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.SETTING__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSettingAccess().getCameraCameraShotStatementParserRuleCall_2_0(), semanticObject.getCamera());
		feeder.accept(grammarAccess.getSettingAccess().getLightingLightingStatementParserRuleCall_3_0(), semanticObject.getLighting());
		feeder.accept(grammarAccess.getSettingAccess().getDescriptionDescriptionStatementParserRuleCall_4_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
}
