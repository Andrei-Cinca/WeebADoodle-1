/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mde.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.mde.services.WeebADoodleGrammarAccess;
import uk.ac.kcl.inf.mde.weebADoodle.Board;
import uk.ac.kcl.inf.mde.weebADoodle.WeebADoodlePackage;

@SuppressWarnings("all")
public class WeebADoodleSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WeebADoodleGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WeebADoodlePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WeebADoodlePackage.ACTION:
				sequence_Action(context, (uk.ac.kcl.inf.mde.weebADoodle.Action) semanticObject); 
				return; 
			case WeebADoodlePackage.BOARD:
				sequence_Board(context, (Board) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Setting returns Action
	 *     Action returns Action
	 *
	 * Constraint:
	 *     command=ActionCommand
	 * </pre>
	 */
	protected void sequence_Action(ISerializationContext context, uk.ac.kcl.inf.mde.weebADoodle.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WeebADoodlePackage.Literals.ACTION__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WeebADoodlePackage.Literals.ACTION__COMMAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getCommandActionCommandEnumRuleCall_0_0(), semanticObject.getCommand());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Board returns Board
	 *
	 * Constraint:
	 *     settings+=Setting+
	 * </pre>
	 */
	protected void sequence_Board(ISerializationContext context, Board semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
