/*
 * generated by Xtext 2.29.0
 */
grammar InternalWeebADoodle;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.mde.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mde.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.mde.services.WeebADoodleGrammarAccess;

}
@parser::members {
	private WeebADoodleGrammarAccess grammarAccess;

	public void setGrammarAccess(WeebADoodleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleBoard
entryRuleBoard
:
{ before(grammarAccess.getBoardRule()); }
	 ruleBoard
{ after(grammarAccess.getBoardRule()); } 
	 EOF 
;

// Rule Board
ruleBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoardAccess().getSettingsAssignment()); }
		(rule__Board__SettingsAssignment)*
		{ after(grammarAccess.getBoardAccess().getSettingsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetting
entryRuleSetting
:
{ before(grammarAccess.getSettingRule()); }
	 ruleSetting
{ after(grammarAccess.getSettingRule()); } 
	 EOF 
;

// Rule Setting
ruleSetting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSettingAccess().getAlternatives()); }
		(rule__Setting__Alternatives)
		{ after(grammarAccess.getSettingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCharacter
entryRuleCharacter
:
{ before(grammarAccess.getCharacterRule()); }
	 ruleCharacter
{ after(grammarAccess.getCharacterRule()); } 
	 EOF 
;

// Rule Character
ruleCharacter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCharacterAccess().getCharacterKeyword()); }
		'character'
		{ after(grammarAccess.getCharacterAccess().getCharacterKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ActionCommand
ruleActionCommand
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionCommandAccess().getAlternatives()); }
		(rule__ActionCommand__Alternatives)
		{ after(grammarAccess.getActionCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSettingAccess().getActionParserRuleCall_0()); }
		ruleAction
		{ after(grammarAccess.getSettingAccess().getActionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSettingAccess().getCharacterParserRuleCall_1()); }
		ruleCharacter
		{ after(grammarAccess.getSettingAccess().getCharacterParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionCommandAccess().getForwardEnumLiteralDeclaration_0()); }
		('forward')
		{ after(grammarAccess.getActionCommandAccess().getForwardEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionCommandAccess().getBackwardEnumLiteralDeclaration_1()); }
		('backward')
		{ after(grammarAccess.getActionCommandAccess().getBackwardEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getCommandAssignment_0()); }
	(rule__Action__CommandAssignment_0)
	{ after(grammarAccess.getActionAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getActionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getActionAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Board__SettingsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoardAccess().getSettingsSettingParserRuleCall_0()); }
		ruleSetting
		{ after(grammarAccess.getBoardAccess().getSettingsSettingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getCommandActionCommandEnumRuleCall_0_0()); }
		ruleActionCommand
		{ after(grammarAccess.getActionAccess().getCommandActionCommandEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
